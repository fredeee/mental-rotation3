{"remainingRequest":"/Users/fbecker/Documents/Uni/mentalrotation3/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/fbecker/Documents/Uni/mentalrotation3/node_modules/magpie-base/src/components/trial_screens/CompletionScreen.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/fbecker/Documents/Uni/mentalrotation3/node_modules/magpie-base/src/components/trial_screens/CompletionScreen.vue","mtime":1642626386065},{"path":"/Users/fbecker/Documents/Uni/mentalrotation3/node_modules/cache-loader/dist/cjs.js","mtime":1642626384207},{"path":"/Users/fbecker/Documents/Uni/mentalrotation3/node_modules/vue-loader/lib/index.js","mtime":1642626384903}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCmltcG9ydCBSZWNvcmQgZnJvbSAnLi4vaGVscGVycy9SZWNvcmQnOwppbXBvcnQgQ29tcGxldGlvbklucHV0IGZyb20gJy4uL2lucHV0cy9Db21wbGV0aW9uSW5wdXQnOwppbXBvcnQgTGlmZWN5Y2xlU2NyZWVuIGZyb20gJy4uL3NjcmVlbnMvTGlmZWN5Y2xlU2NyZWVuJzsKCi8qKgogKiBJbmhlcml0cyBmcm9tIExpZmVjeWNsZVNjcmVlbgogKi8KZXhwb3J0IGRlZmF1bHQgewogIG5hbWU6ICdDb21wbGV0aW9uU2NyZWVuJywKICBjb21wb25lbnRzOiB7CiAgICBMaWZlY3ljbGVTY3JlZW4sCiAgICBDb21wbGV0aW9uSW5wdXQsCiAgICBSZWNvcmQKICB9LAogIGV4dGVuZHM6IExpZmVjeWNsZVNjcmVlbiwKICBwcm9wczogewogICAgLyoqCiAgICAgKiBBIHF1ZXN0aW9uCiAgICAgKi8KICAgIHF1ZXN0aW9uOiB7CiAgICAgIHR5cGU6IFN0cmluZywKICAgICAgcmVxdWlyZWQ6IHRydWUKICAgIH0sCiAgICAvKioKICAgICAqIFRoZSB0ZXh0IHRoYXQgaXMgc3VwcG9zZWQgdG8gYmUgY29tcGxldGVkLiBgJXNgIG1hcmtzIGNvbXBsZXRpb25zCiAgICAgKi8KICAgIHRleHQ6IHsKICAgICAgdHlwZTogU3RyaW5nLAogICAgICByZXF1aXJlZDogdHJ1ZQogICAgfSwKICAgIC8qKgogICAgICogQW4gYXJyYXkgb2YgYXJyYXlzIHdpdGggcG9zc2libGUgY29tcGxldGlvbnMgcGVyIGAlc2AKICAgICAqLwogICAgb3B0aW9uczogewogICAgICB0eXBlOiBBcnJheSwKICAgICAgcmVxdWlyZWQ6IHRydWUKICAgIH0KICB9Cn07Cg=="},{"version":3,"sources":["CompletionScreen.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8DA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"CompletionScreen.vue","sourceRoot":"node_modules/magpie-base/src/components/trial_screens","sourcesContent":["<docs>\nThis is a pre-built completion screen, with limited functionality, but simpler to use.\n\n```vue\n<Experiment>\n    <CompletionScreen\n        question=\"What happened in antartica?\"\n        text=\"One %s fell over three %s.\"\n        :options=\"[\n              ['horse', 'penguin', 'bird'],\n              ['icicles', 'trees', 'bushes']\n              ]\"\n    />\n\n    <DebugResultsScreen />\n</Experiment>\n```\n</docs>\n\n<template>\n  <!-- pass down props -->\n  <LifecycleScreen v-bind=\"$props\">\n    <!-- pass down slots -->\n    <template slot=\"fixation\">\n      <slot name=\"fixation\"></slot>\n    </template>\n    <template slot=\"stimulus\">\n      <slot name=\"stimulus\"></slot>\n    </template>\n\n    <template #task>\n      <Record\n        :data=\"{\n          question,\n          options,\n          text\n        }\"\n      />\n      <p v-if=\"question\" v-text=\"question\"></p>\n      <CompletionInput\n        :text=\"text\"\n        :options=\"options\"\n        :response.sync=\"$magpie.measurements.completed_text\"\n        :responses.sync=\"$magpie.measurements.responses\"\n      />\n      <button\n        v-if=\"\n          $magpie.measurements.responses &&\n          $magpie.measurements.responses.filter(Boolean).length ===\n            options.length\n        \"\n        @click=\"nextAfterResponse\"\n      >\n        Next\n      </button>\n    </template>\n\n    <template #feedback><slot name=\"feedback\"></slot></template>\n  </LifecycleScreen>\n</template>\n\n<script>\nimport Record from '../helpers/Record';\nimport CompletionInput from '../inputs/CompletionInput';\nimport LifecycleScreen from '../screens/LifecycleScreen';\n\n/**\n * Inherits from LifecycleScreen\n */\nexport default {\n  name: 'CompletionScreen',\n  components: {\n    LifecycleScreen,\n    CompletionInput,\n    Record\n  },\n  extends: LifecycleScreen,\n  props: {\n    /**\n     * A question\n     */\n    question: {\n      type: String,\n      required: true\n    },\n    /**\n     * The text that is supposed to be completed. `%s` marks completions\n     */\n    text: {\n      type: String,\n      required: true\n    },\n    /**\n     * An array of arrays with possible completions per `%s`\n     */\n    options: {\n      type: Array,\n      required: true\n    }\n  }\n};\n</script>\n<style scoped></style>\n"]}]}