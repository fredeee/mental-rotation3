{"remainingRequest":"/Users/fbecker/Documents/Uni/mentalrotation3/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/fbecker/Documents/Uni/mentalrotation3/node_modules/magpie-base/src/components/stimuli/SelfPacedReading.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/fbecker/Documents/Uni/mentalrotation3/node_modules/magpie-base/src/components/stimuli/SelfPacedReading.vue","mtime":1642626386097},{"path":"/Users/fbecker/Documents/Uni/mentalrotation3/node_modules/cache-loader/dist/cjs.js","mtime":1642626384207},{"path":"/Users/fbecker/Documents/Uni/mentalrotation3/node_modules/vue-loader/lib/index.js","mtime":1642626384903}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCmltcG9ydCBLZXlwcmVzc0lucHV0IGZyb20gJy4uL2lucHV0cy9LZXlwcmVzc0lucHV0JzsKaW1wb3J0IFdhaXQgZnJvbSAnLi4vaGVscGVycy9XYWl0JzsKCmV4cG9ydCBkZWZhdWx0IHsKICBuYW1lOiAnU2VsZlBhY2VkUmVhZGluZycsCiAgY29tcG9uZW50czogeyBLZXlwcmVzc0lucHV0LCBXYWl0IH0sCiAgcHJvcHM6IHsKICAgIC8qKgogICAgICogU2VsZi1wYWNlZCByZWFkaW5nIHRleHQgY2h1bmtzCiAgICAgKi8KICAgIGNodW5rczogewogICAgICB0eXBlOiBBcnJheSwKICAgICAgcmVxdWlyZWQ6IHRydWUKICAgIH0sCiAgICAvKioKICAgICAqIEdpdmUgaW5zdHJ1Y3Rpb25zIG9uIHdoYXQgdGhlIHBhcnRpY2lwYW50IGlzIHN1cHBvc2VkIHRvIGRvCiAgICAgKi8KICAgIGluc3RydWN0aW9uczogewogICAgICB0eXBlOiBTdHJpbmcsCiAgICAgIGRlZmF1bHQ6ICdQcmVzcyBTUEFDRSB0byByZXZlYWwgdGhlIHdvcmRzLicKICAgIH0sCiAgICAvKioKICAgICAqIFRoZSBrZXkgdG8gcHJlc3MgdG8gcmV2ZWFsIHRoZSBuZXh0IHdvcmQKICAgICAqLwogICAgdHJpZ2dlcjogewogICAgICB0eXBlOiBTdHJpbmcsCiAgICAgIGRlZmF1bHQ6ICcgJwogICAgfSwKICAgIC8qKgogICAgICogVW5kZXJsaW5lIHR5cGUKICAgICAqCiAgICAgKiBAdmFsdWVzIHdvcmRzLCBzZW50ZW5jZSBvciBub25lCiAgICAgKi8KICAgIHVuZGVybGluZTogewogICAgICB0eXBlOiBTdHJpbmcsCiAgICAgIGRlZmF1bHQ6ICdub25lJwogICAgfSwKICAgIC8qKgogICAgICogV2hldGhlciB0byBzaG93IHRoZSBuZXh0IHdvcmQgYXQgdGhlIHNhbWUgcG9zaXRpb24gb3IgYXQgdGhlIG5leHQKICAgICAqCiAgICAgKiBAdmFsdWVzIHNhbWUgb3IgbmV4dAogICAgICovCiAgICB3b3JkUG9zOiB7CiAgICAgIHR5cGU6IFN0cmluZywKICAgICAgZGVmYXVsdDogJ3NhbWUnCiAgICB9CiAgfSwKICBkYXRhKCkgewogICAgcmV0dXJuIHsKICAgICAgd29yZDogLTEsCiAgICAgIHJlc3BvbnNlVGltZXM6IFtdLAogICAgICBzdGFydFRpbWU6IG51bGwsCiAgICAgIHNsaWRlOiAwCiAgICB9OwogIH0sCiAgbWV0aG9kczogewogICAgbmV4dFNsaWRlKCkgewogICAgICB0aGlzLnNsaWRlKys7CiAgICB9LAogICAgbmV4dFdvcmQoKSB7CiAgICAgIGlmICh0aGlzLndvcmQgPiAtMSkgewogICAgICAgIHRoaXMucmVzcG9uc2VUaW1lcy5wdXNoKERhdGUubm93KCkgLSB0aGlzLnN0YXJ0VGltZSk7CiAgICAgIH0KICAgICAgdGhpcy53b3JkKys7CiAgICAgIHRoaXMuc3RhcnRUaW1lID0gRGF0ZS5ub3coKTsKICAgICAgaWYgKHRoaXMud29yZCA9PT0gdGhpcy5jaHVua3MubGVuZ3RoKSB7CiAgICAgICAgdGhpcy4kZW1pdCgndXBkYXRlOnJlc3BvbnNlLXRpbWVzJywgdGhpcy5yZXNwb25zZVRpbWVzKTsKICAgICAgfQogICAgfQogIH0KfTsK"},{"version":3,"sources":["SelfPacedReading.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+DA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"SelfPacedReading.vue","sourceRoot":"node_modules/magpie-base/src/components/stimuli","sourcesContent":["<docs>\n\n```vue\n<Experiment>\n    <Screen>\n        <SelfPacedReading\n            :chunks=\"['This', 'is', 'a', 'nice', 'text.']\"\n            word-pos=\"next\"\n            underline=\"sentence\"\n            trigger=\"~\"\n            :response-times.sync=\"$magpie.measurements.times\" />\n    </Screen>\n\n    <DebugResultsScreen />\n</Experiment>\n```\n\n</docs>\n\n<template>\n  <div>\n    <div v-if=\"slide === 0\">\n      <!-- @slot provide a preparation stimulus, i.e. a text or an audio explanation-->\n      <slot name=\"prep\" :done=\"nextSlide()\">\n        <Wait :time=\"1\" @done=\"nextSlide()\" />\n      </slot>\n    </div>\n\n    <div v-if=\"slide === 1\">\n      <Wait :time=\"500\" @done=\"nextSlide()\" />\n    </div>\n\n    <div v-if=\"slide === 2\">\n      <!-- @slot optional stimulus content -->\n      <slot name=\"stimulus\"></slot>\n      <KeypressInput\n        :keys=\"{ [trigger]: instructions }\"\n        @update:response=\"nextWord\"\n      />\n      <div\n        :class=\"{\n          text: true,\n          'underline-words': underline === 'words',\n          'underline-sentence': underline === 'sentence',\n          'show-all': wordPos === 'next'\n        }\"\n      >\n        <span\n          v-for=\"(chunk, i) in chunks\"\n          :key=\"i\"\n          :class=\"{ current: i === word }\"\n          v-text=\"chunk\"\n        ></span>\n      </div>\n      <!-- @slot task content, displayed after the whole text was read -->\n      <template v-if=\"word >= chunks.length\">\n        <Wait :time=\"0\" @done=\"$emit('end')\" />\n      </template>\n    </div>\n  </div>\n</template>\n\n<script>\nimport KeypressInput from '../inputs/KeypressInput';\nimport Wait from '../helpers/Wait';\n\nexport default {\n  name: 'SelfPacedReading',\n  components: { KeypressInput, Wait },\n  props: {\n    /**\n     * Self-paced reading text chunks\n     */\n    chunks: {\n      type: Array,\n      required: true\n    },\n    /**\n     * Give instructions on what the participant is supposed to do\n     */\n    instructions: {\n      type: String,\n      default: 'Press SPACE to reveal the words.'\n    },\n    /**\n     * The key to press to reveal the next word\n     */\n    trigger: {\n      type: String,\n      default: ' '\n    },\n    /**\n     * Underline type\n     *\n     * @values words, sentence or none\n     */\n    underline: {\n      type: String,\n      default: 'none'\n    },\n    /**\n     * Whether to show the next word at the same position or at the next\n     *\n     * @values same or next\n     */\n    wordPos: {\n      type: String,\n      default: 'same'\n    }\n  },\n  data() {\n    return {\n      word: -1,\n      responseTimes: [],\n      startTime: null,\n      slide: 0\n    };\n  },\n  methods: {\n    nextSlide() {\n      this.slide++;\n    },\n    nextWord() {\n      if (this.word > -1) {\n        this.responseTimes.push(Date.now() - this.startTime);\n      }\n      this.word++;\n      this.startTime = Date.now();\n      if (this.word === this.chunks.length) {\n        this.$emit('update:response-times', this.responseTimes);\n      }\n    }\n  }\n};\n</script>\n\n<style scoped>\n.text {\n  margin: 30px auto;\n}\n\n.text * {\n  margin-right: 5px;\n}\n\n.text.underline-sentence * {\n  margin-right: 0;\n  padding-right: 5px;\n  border-bottom: 1px solid black;\n}\n\n.text.underline-words * {\n  border-bottom: 1px solid black;\n}\n\n.text :not(.current) {\n  display: none;\n}\n\n.text.show-all :not(.current) {\n  color: transparent;\n  display: inline;\n}\n\n.text .current {\n  color: black;\n  display: inline;\n}\n</style>\n"]}]}